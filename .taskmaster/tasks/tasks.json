{
  "master": {
    "tasks": [
      {
        "id": 11,
        "title": "Supabase 프로젝트 설정 및 환경 변수 구성",
        "description": "Supabase 인증 프로젝트를 생성하고 환경 변수를 설정하여 블로그 관리자 인증 시스템의 기반을 마련합니다.",
        "details": "1. Supabase 대시보드에서 새 프로젝트 생성\n2. Authentication 서비스 활성화\n3. 프로젝트 URL과 익명 키 확인\n4. .env.local 파일 생성 및 환경 변수 설정:\n   - NEXT_PUBLIC_SUPABASE_URL\n   - NEXT_PUBLIC_SUPABASE_ANON_KEY\n5. .env.local을 .gitignore에 추가하여 보안 유지\n6. 이메일/패스워드 인증 제공자 활성화",
        "testStrategy": "환경 변수 로드 테스트, Supabase 연결 상태 확인, 인증 서비스 활성화 상태 검증",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Supabase 프로젝트 생성 및 기본 설정",
            "description": "Supabase 대시보드에서 새 프로젝트를 생성하고 Authentication 서비스를 활성화합니다.",
            "dependencies": [],
            "details": "1. Supabase 대시보드 접속 및 로그인\n2. 새 프로젝트 생성 (프로젝트명, 데이터베이스 패스워드 설정)\n3. Authentication 서비스 활성화\n4. 이메일/패스워드 인증 제공자 활성화\n5. 프로젝트 URL과 익명 키 확인 및 기록\n6. 인증 설정 검증 및 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "환경 변수 파일 생성 및 설정",
            "description": "프로젝트 루트에 .env.local 파일을 생성하고 Supabase 연결에 필요한 환경 변수를 설정합니다.",
            "dependencies": [
              1
            ],
            "details": "1. 프로젝트 루트에 .env.local 파일 생성\n2. NEXT_PUBLIC_SUPABASE_URL 환경 변수 설정\n3. NEXT_PUBLIC_SUPABASE_ANON_KEY 환경 변수 설정\n4. 환경 변수 값 검증 및 테스트\n5. Next.js 환경 변수 로드 확인\n6. 개발 서버 재시작 및 변수 로드 테스트",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "보안 설정 및 .gitignore 업데이트",
            "description": "환경 변수 파일의 보안을 위해 .gitignore에 추가하고 추가적인 보안 설정을 구성합니다.",
            "dependencies": [
              2
            ],
            "details": "1. .gitignore 파일에 .env.local 추가\n2. .env.example 파일 생성 (환경 변수 템플릿)\n3. Git 상태 확인 및 민감한 정보 제외 검증\n4. Supabase 프로젝트 보안 설정 검토\n5. RLS (Row Level Security) 기본 설정 확인\n6. 보안 설정 문서화 및 팀원 가이드 작성",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 12,
        "title": "Supabase 클라이언트 초기화 및 의존성 설치",
        "description": "@supabase/supabase-js 패키지를 설치하고 Next.js 앱에서 사용할 수 있도록 Supabase 클라이언트를 초기화합니다.",
        "details": "1. @supabase/supabase-js 패키지 설치: npm install @supabase/supabase-js\n2. lib/supabase.ts 파일 생성\n3. createClient 함수를 사용하여 Supabase 클라이언트 초기화\n4. 환경 변수를 사용한 클라이언트 설정\n5. TypeScript 타입 정의 추가\n6. 클라이언트 인스턴스 export",
        "testStrategy": "Supabase 클라이언트 초기화 테스트, 환경 변수 로드 검증, TypeScript 타입 체크",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Supabase 패키지 설치",
            "description": "@supabase/supabase-js 패키지를 npm을 통해 설치합니다.",
            "dependencies": [],
            "details": "npm install @supabase/supabase-js 명령어를 실행하여 Supabase JavaScript 클라이언트 라이브러리를 프로젝트에 추가합니다. package.json에 의존성이 정확히 추가되었는지 확인합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Supabase 클라이언트 초기화 파일 생성",
            "description": "lib/supabase.ts 파일을 생성하고 createClient 함수를 사용하여 Supabase 클라이언트를 초기화합니다.",
            "dependencies": [
              1
            ],
            "details": "lib 디렉토리에 supabase.ts 파일을 생성하고, createClient 함수를 import하여 환경 변수를 사용한 클라이언트 인스턴스를 생성합니다. 생성된 클라이언트를 export하여 다른 파일에서 사용할 수 있도록 합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "TypeScript 타입 정의 설정",
            "description": "Supabase 클라이언트용 TypeScript 타입 정의를 추가하고 환경 변수 타입을 설정합니다.",
            "dependencies": [
              2
            ],
            "details": "TypeScript 타입 정의를 추가하여 타입 안정성을 확보합니다. 환경 변수에 대한 타입 선언을 추가하고, Supabase 클라이언트 인스턴스의 타입을 명시적으로 정의합니다. 필요시 types 디렉토리에 추가 타입 정의 파일을 생성합니다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 13,
        "title": "AuthProvider 컨텍스트 구현",
        "description": "React Context API를 사용하여 전역 인증 상태를 관리하는 AuthProvider를 구현합니다.",
        "details": "1. contexts/AuthContext.tsx 파일 생성\n2. AuthState 인터페이스 정의 (user, loading, error)\n3. User 타입 정의 (id, email, created_at, last_sign_in_at)\n4. AuthProvider 컴포넌트 구현\n5. useAuth 커스텀 훅 생성\n6. useReducer를 사용한 상태 관리\n7. Supabase 인증 상태 변경 리스너 구현\n8. 초기 세션 확인 로직 추가",
        "testStrategy": "Context Provider 렌더링 테스트, 인증 상태 변경 시뮬레이션, 커스텀 훅 기능 검증",
        "priority": "high",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "AuthState 인터페이스 및 User 타입 정의",
            "description": "TypeScript를 사용하여 인증 상태 관리에 필요한 타입들을 정의합니다. AuthState 인터페이스(user, loading, error)와 User 타입(id, email, created_at, last_sign_in_at)을 포함합니다.",
            "dependencies": [],
            "details": "1. contexts/AuthContext.tsx 파일 생성\n2. User 인터페이스 정의 (id: string, email: string, created_at: string, last_sign_in_at: string)\n3. AuthState 인터페이스 정의 (user: User | null, loading: boolean, error: string | null)\n4. AuthAction 타입 정의 (로그인, 로그아웃, 로딩, 에러 액션)\n5. 타입 export 설정",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "AuthProvider 컨텍스트 구현",
            "description": "React Context API와 useReducer를 사용하여 전역 인증 상태를 관리하는 AuthProvider 컴포넌트를 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "1. AuthContext 생성 (createContext 사용)\n2. authReducer 함수 구현 (상태 업데이트 로직)\n3. AuthProvider 컴포넌트 구현\n4. useReducer를 사용한 상태 관리\n5. Context.Provider로 children 컴포넌트 감싸기\n6. 초기 상태 설정 (user: null, loading: true, error: null)",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "useAuth 커스텀 훅 생성",
            "description": "AuthContext를 쉽게 사용할 수 있도록 하는 커스텀 훅을 생성하고, 인증 관련 메서드들을 제공합니다.",
            "dependencies": [
              2
            ],
            "details": "1. useAuth 훅 구현 (useContext 사용)\n2. Context 존재 여부 검증\n3. signIn, signOut, signUp 메서드 구현\n4. Supabase 인증 함수와 연동\n5. 에러 처리 및 로딩 상태 관리\n6. 타입 안정성 보장",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "인증 상태 변경 리스너 및 세션 확인 로직 구현",
            "description": "Supabase 인증 상태 변경을 감지하고 세션을 자동으로 확인하는 리스너 시스템을 구현합니다.",
            "dependencies": [
              3
            ],
            "details": "1. useEffect를 사용한 초기 세션 확인\n2. supabase.auth.onAuthStateChange 리스너 설정\n3. 세션 변경 시 상태 업데이트\n4. 컴포넌트 언마운트 시 리스너 정리\n5. 세션 갱신 로직 추가\n6. 에러 발생 시 적절한 상태 업데이트",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 14,
        "title": "로그인 폼 컴포넌트 생성",
        "description": "사용자가 이메일과 패스워드로 로그인할 수 있는 반응형 로그인 폼을 구현합니다.",
        "details": "1. components/auth/LoginForm.tsx 파일 생성\n2. shadcn/ui 컴포넌트 활용 (Form, Input, Button, Card)\n3. react-hook-form을 사용한 폼 관리\n4. 이메일 및 패스워드 유효성 검사\n5. 로딩 상태 표시\n6. 에러 메시지 표시\n7. Supabase signInWithPassword 함수 연동\n8. 접근성 고려 (aria-label, 키보드 네비게이션)\n9. 반응형 디자인 적용",
        "testStrategy": "폼 유효성 검사 테스트, 로그인 기능 통합 테스트, 접근성 테스트, 반응형 디자인 검증",
        "priority": "medium",
        "dependencies": [
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Next.js 미들웨어 구현",
        "description": "/admin 경로에 대한 자동 인증 상태 확인 및 접근 제어를 위한 미들웨어를 구현합니다.",
        "details": "1. middleware.ts 파일 생성 (프로젝트 루트)\n2. NextRequest, NextResponse 타입 import\n3. Supabase 미들웨어 설정\n4. /admin 경로 패턴 매칭\n5. 인증 상태 확인 로직\n6. 미인증 사용자 로그인 페이지 리다이렉트\n7. 인증된 사용자 요청 통과 처리\n8. 세션 갱신 로직 추가\n9. matcher 설정으로 대상 경로 지정",
        "testStrategy": "미들웨어 실행 테스트, 리다이렉트 로직 검증, 인증 상태별 접근 제어 테스트",
        "priority": "high",
        "dependencies": [
          13
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "기본 미들웨어 구조 및 경로 매칭 설정",
            "description": "middleware.ts 파일을 생성하고 Next.js 미들웨어 기본 구조를 설정하며 /admin 경로에 대한 매칭 로직을 구현합니다.",
            "dependencies": [],
            "details": "1. 프로젝트 루트에 middleware.ts 파일 생성\n2. NextRequest, NextResponse 타입 import\n3. Supabase 미들웨어 설정을 위한 기본 구조 작성\n4. /admin 경로 패턴 매칭 로직 구현\n5. matcher 설정으로 대상 경로 지정\n6. 미들웨어 실행 흐름 기본 틀 구성",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "인증 상태 확인 및 리다이렉트 로직 구현",
            "description": "사용자의 인증 상태를 확인하고 미인증 사용자를 로그인 페이지로 리다이렉트하는 로직을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "1. Supabase 클라이언트를 통한 인증 상태 확인\n2. 세션 유효성 검증 로직\n3. 미인증 사용자 감지 시 로그인 페이지 리다이렉트\n4. 인증된 사용자 요청 통과 처리\n5. 리다이렉트 URL 파라미터 설정\n6. 에러 처리 및 예외 상황 대응",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "세션 갱신 및 보안 설정 구현",
            "description": "사용자 세션의 자동 갱신과 보안 헤더 설정을 통해 안전한 인증 환경을 구축합니다.",
            "dependencies": [
              2
            ],
            "details": "1. 세션 만료 감지 및 자동 갱신 로직\n2. 토큰 갱신 처리\n3. 보안 헤더 설정 (CSRF 보호 등)\n4. 세션 상태 변경 감지\n5. 미들웨어 성능 최적화\n6. 로깅 및 모니터링 설정\n7. 세션 갱신 실패 시 처리 로직",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 16,
        "title": "로그인 페이지 구현",
        "description": "/login 경로에 대한 전용 로그인 페이지를 구현하고 사용자 경험을 최적화합니다.",
        "details": "1. app/login/page.tsx 파일 생성\n2. LoginForm 컴포넌트 통합\n3. 페이지 레이아웃 및 스타일링\n4. 로그인 성공 후 리다이렉트 로직\n5. 이미 로그인한 사용자 처리\n6. 페이지 메타데이터 설정\n7. 로딩 상태 처리\n8. 에러 바운더리 추가",
        "testStrategy": "페이지 렌더링 테스트, 로그인 플로우 E2E 테스트, 리다이렉트 로직 검증",
        "priority": "medium",
        "dependencies": [
          14
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "API 라우트 핸들러 구현",
        "description": "인증 관련 API 엔드포인트를 구현하여 OAuth 콜백과 로그아웃 처리를 담당합니다.",
        "details": "1. app/api/auth/callback/route.ts 파일 생성\n2. OAuth 콜백 처리 로직 구현\n3. 세션 쿠키 설정\n4. app/api/auth/signout/route.ts 파일 생성\n5. 로그아웃 처리 및 세션 삭제\n6. 에러 처리 및 응답 상태 코드 설정\n7. CORS 설정 (필요시)\n8. 보안 헤더 설정",
        "testStrategy": "API 엔드포인트 응답 테스트, 세션 처리 검증, 에러 처리 테스트",
        "priority": "medium",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "관리자 페이지 기본 구조 구현",
        "description": "인증된 사용자만 접근할 수 있는 /admin 경로의 기본 관리자 페이지를 구현합니다.",
        "details": "1. app/admin/page.tsx 파일 생성\n2. 관리자 대시보드 기본 레이아웃\n3. 사용자 정보 표시\n4. 로그아웃 버튼 구현\n5. 관리자 메뉴 네비게이션\n6. 인증 상태 확인 클라이언트 사이드 가드\n7. 로딩 상태 처리\n8. 에러 바운더리 추가",
        "testStrategy": "관리자 페이지 접근 제어 테스트, 로그아웃 기능 검증, 사용자 정보 표시 테스트",
        "priority": "medium",
        "dependencies": [
          15
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "에러 처리 및 사용자 피드백 시스템",
        "description": "인증 과정에서 발생할 수 있는 다양한 에러 상황을 처리하고 사용자에게 적절한 피드백을 제공합니다.",
        "details": "1. components/ui/Toast.tsx 알림 컴포넌트 구현\n2. 에러 타입별 메시지 정의\n3. 네트워크 오류 처리\n4. 인증 실패 메시지 표시\n5. 세션 만료 알림\n6. 성공 메시지 표시\n7. 에러 바운더리 컴포넌트 생성\n8. 전역 에러 핸들러 구현",
        "testStrategy": "에러 시나리오별 메시지 표시 테스트, 알림 컴포넌트 기능 검증, 에러 바운더리 동작 테스트",
        "priority": "medium",
        "dependencies": [
          16,
          17
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "세션 관리 및 자동 갱신 시스템",
        "description": "사용자 세션의 지속성을 보장하고 자동 갱신을 통해 원활한 사용자 경험을 제공합니다.",
        "details": "1. 세션 만료 감지 로직 구현\n2. 자동 토큰 갱신 메커니즘\n3. 세션 상태 변경 리스너\n4. 로컬 스토리지 세션 백업\n5. 세션 복원 로직\n6. 유저 활동 감지\n7. 세션 만료 전 경고 알림\n8. 강제 로그아웃 처리",
        "testStrategy": "세션 만료 시나리오 테스트, 자동 갱신 기능 검증, 세션 복원 테스트",
        "priority": "medium",
        "dependencies": [
          13,
          17
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "세션 만료 감지 및 자동 갱신 메커니즘 구현",
            "description": "JWT 토큰의 만료 시간을 감지하고 자동으로 토큰을 갱신하는 시스템을 구현합니다.",
            "dependencies": [],
            "details": "JWT 토큰 디코딩을 통한 만료 시간 확인, refresh token을 사용한 자동 갱신 로직, 갱신 실패 시 재시도 메커니즘, 갱신 중 API 호출 대기 큐 관리",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "세션 상태 변경 리스너 및 백업 시스템 구현",
            "description": "세션 상태 변경을 감지하는 리스너와 로컬 스토리지를 활용한 세션 백업 시스템을 구현합니다.",
            "dependencies": [
              1
            ],
            "details": "Supabase 세션 상태 변경 이벤트 리스너 구현, 로컬 스토리지 세션 데이터 백업, 세션 상태 동기화 로직, 중복 세션 방지 메커니즘",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "사용자 활동 감지 및 세션 복원 로직 구현",
            "description": "사용자의 활동을 감지하여 세션을 유지하고 페이지 새로고침 시 세션을 복원하는 로직을 구현합니다.",
            "dependencies": [
              2
            ],
            "details": "마우스 이벤트, 키보드 이벤트 등 사용자 활동 감지, 비활성 타이머 관리, 페이지 새로고침 시 세션 복원, 탭 간 세션 동기화",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "세션 만료 경고 알림 시스템 구현",
            "description": "세션 만료 전 사용자에게 경고 알림을 표시하고 세션 연장 옵션을 제공하는 시스템을 구현합니다.",
            "dependencies": [
              3
            ],
            "details": "세션 만료 전 경고 타이머 설정, 모달 또는 토스트 알림 UI 구현, 세션 연장 확인 버튼, 카운트다운 표시 기능",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "강제 로그아웃 및 보안 처리 로직 구현",
            "description": "보안 이슈 발생 시 강제 로그아웃을 수행하고 세션 정리를 처리하는 로직을 구현합니다.",
            "dependencies": [
              4
            ],
            "details": "토큰 무효화 처리, 로컬 스토리지 세션 데이터 정리, 보안 이벤트 감지 로직, 리다이렉트 및 인증 상태 초기화, 동시 세션 제한 처리",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-14T01:31:49.695Z",
      "updated": "2025-07-16T07:55:30.760Z",
      "description": "Tasks for master context"
    }
  }
}